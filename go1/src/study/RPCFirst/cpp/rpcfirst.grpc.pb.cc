// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcfirst.proto

#include "rpcfirst.pb.h"
#include "rpcfirst.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace RPCFirst {

static const char* Demo_method_names[] = {
  "/RPCFirst.Demo/SayHello",
  "/RPCFirst.Demo/LotsOfReplies",
  "/RPCFirst.Demo/LotsOfGreetings",
  "/RPCFirst.Demo/BidiHello",
};

std::unique_ptr< Demo::Stub> Demo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Demo::Stub> stub(new Demo::Stub(channel));
  return stub;
}

Demo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Demo_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LotsOfReplies_(Demo_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LotsOfGreetings_(Demo_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_BidiHello_(Demo_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Demo::Stub::SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::RPCFirst::RespHello* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Demo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Demo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Demo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

void Demo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>* Demo::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>* Demo::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::ClientReader< ::RPCFirst::RespHello>* Demo::Stub::LotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::RPCFirst::RespHello>::Create(channel_.get(), rpcmethod_LotsOfReplies_, context, request);
}

void Demo::Stub::experimental_async::LotsOfReplies(::grpc::ClientContext* context, ::RPCFirst::ReqHello* request, ::grpc::experimental::ClientReadReactor< ::RPCFirst::RespHello>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::RPCFirst::RespHello>::Create(stub_->channel_.get(), stub_->rpcmethod_LotsOfReplies_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::RPCFirst::RespHello>* Demo::Stub::AsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_LotsOfReplies_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::RPCFirst::RespHello>* Demo::Stub::PrepareAsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_LotsOfReplies_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::RPCFirst::ReqHello>* Demo::Stub::LotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::RPCFirst::ReqHello>::Create(channel_.get(), rpcmethod_LotsOfGreetings_, context, response);
}

void Demo::Stub::experimental_async::LotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientWriteReactor< ::RPCFirst::ReqHello>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::RPCFirst::ReqHello>::Create(stub_->channel_.get(), stub_->rpcmethod_LotsOfGreetings_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>* Demo::Stub::AsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::RPCFirst::ReqHello>::Create(channel_.get(), cq, rpcmethod_LotsOfGreetings_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>* Demo::Stub::PrepareAsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::RPCFirst::ReqHello>::Create(channel_.get(), cq, rpcmethod_LotsOfGreetings_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* Demo::Stub::BidiHelloRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>::Create(channel_.get(), rpcmethod_BidiHello_, context);
}

void Demo::Stub::experimental_async::BidiHello(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::RPCFirst::ReqHello,::RPCFirst::RespHello>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::RPCFirst::ReqHello,::RPCFirst::RespHello>::Create(stub_->channel_.get(), stub_->rpcmethod_BidiHello_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* Demo::Stub::AsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_BidiHello_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* Demo::Stub::PrepareAsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>::Create(channel_.get(), cq, rpcmethod_BidiHello_, context, false, nullptr);
}

Demo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Demo::Service, ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          std::mem_fn(&Demo::Service::SayHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Demo::Service, ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          std::mem_fn(&Demo::Service::LotsOfReplies), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Demo::Service, ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          std::mem_fn(&Demo::Service::LotsOfGreetings), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Demo::Service, ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          std::mem_fn(&Demo::Service::BidiHello), this)));
}

Demo::Service::~Service() {
}

::grpc::Status Demo::Service::SayHello(::grpc::ServerContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::LotsOfReplies(::grpc::ServerContext* context, const ::RPCFirst::ReqHello* request, ::grpc::ServerWriter< ::RPCFirst::RespHello>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::LotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerReader< ::RPCFirst::ReqHello>* reader, ::RPCFirst::RespHello* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::BidiHello(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RPCFirst

