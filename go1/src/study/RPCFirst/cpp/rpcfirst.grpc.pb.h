// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcfirst.proto
// Original file comments:
// gRPC示例项目
//
//
// -- proto 变量类型选择:
// -- int32 使用可变长编码方式。编码负数时不够高效——如果你的字段可能含有负数，那么请使用sint32。
// -- int64 使用可变长编码方式。编码负数时不够高效——如果你的字段可能含有负数，那么请使用sint64
//
// 编译成pb文件
// protoc -o PbLobbyData.pb PbLobbyData.proto
//
// 编译go文件
// protoc --go_out=./src/PbLobbyData PbLobbyData.proto
//
// 编译生成gRPC文件
// protoc --go_out=plugins=grpc:. PbLobbyData.proto
//
// 编译出来的go文件，务必把json中的 omitempty 去掉，否则查看数据的时候为0就不序列成字符串了。。
//
// 指定proto3语法
#ifndef GRPC_rpcfirst_2eproto__INCLUDED
#define GRPC_rpcfirst_2eproto__INCLUDED

#include "rpcfirst.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace RPCFirst {

// 定义gRPC服务
class Demo final {
 public:
  static constexpr char const* service_full_name() {
    return "RPCFirst.Demo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC普通方法，一次调用一次返回
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::RPCFirst::RespHello* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>> AsyncSayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // RPC 一次请求，流式返回
    std::unique_ptr< ::grpc::ClientReaderInterface< ::RPCFirst::RespHello>> LotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::RPCFirst::RespHello>>(LotsOfRepliesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>> AsyncLotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>>(AsyncLotsOfRepliesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>> PrepareAsyncLotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>>(PrepareAsyncLotsOfRepliesRaw(context, request, cq));
    }
    // RPC 流式请求，一次返回
    std::unique_ptr< ::grpc::ClientWriterInterface< ::RPCFirst::ReqHello>> LotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::RPCFirst::ReqHello>>(LotsOfGreetingsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>> AsyncLotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>>(AsyncLotsOfGreetingsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>> PrepareAsyncLotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>>(PrepareAsyncLotsOfGreetingsRaw(context, response, cq));
    }
    // RPC 流式请求，流式返回
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> BidiHello(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(BidiHelloRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> AsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(AsyncBidiHelloRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> PrepareAsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(PrepareAsyncBidiHelloRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // RPC普通方法，一次调用一次返回
      virtual void SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // RPC 一次请求，流式返回
      virtual void LotsOfReplies(::grpc::ClientContext* context, ::RPCFirst::ReqHello* request, ::grpc::experimental::ClientReadReactor< ::RPCFirst::RespHello>* reactor) = 0;
      // RPC 流式请求，一次返回
      virtual void LotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientWriteReactor< ::RPCFirst::ReqHello>* reactor) = 0;
      // RPC 流式请求，流式返回
      virtual void BidiHello(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::RPCFirst::ReqHello,::RPCFirst::RespHello>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RPCFirst::RespHello>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::RPCFirst::RespHello>* LotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>* AsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RPCFirst::RespHello>* PrepareAsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::RPCFirst::ReqHello>* LotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>* AsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RPCFirst::ReqHello>* PrepareAsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* BidiHelloRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* AsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* PrepareAsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::RPCFirst::RespHello* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>> AsyncSayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::RPCFirst::RespHello>> LotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::RPCFirst::RespHello>>(LotsOfRepliesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>> AsyncLotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>>(AsyncLotsOfRepliesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>> PrepareAsyncLotsOfReplies(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>>(PrepareAsyncLotsOfRepliesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::RPCFirst::ReqHello>> LotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::RPCFirst::ReqHello>>(LotsOfGreetingsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>> AsyncLotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>>(AsyncLotsOfGreetingsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>> PrepareAsyncLotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>>(PrepareAsyncLotsOfGreetingsRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> BidiHello(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(BidiHelloRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> AsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(AsyncBidiHelloRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>> PrepareAsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>>(PrepareAsyncBidiHelloRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void LotsOfReplies(::grpc::ClientContext* context, ::RPCFirst::ReqHello* request, ::grpc::experimental::ClientReadReactor< ::RPCFirst::RespHello>* reactor) override;
      void LotsOfGreetings(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::experimental::ClientWriteReactor< ::RPCFirst::ReqHello>* reactor) override;
      void BidiHello(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::RPCFirst::ReqHello,::RPCFirst::RespHello>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RPCFirst::RespHello>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::RPCFirst::RespHello>* LotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request) override;
    ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>* AsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::RPCFirst::RespHello>* PrepareAsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::RPCFirst::ReqHello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::RPCFirst::ReqHello>* LotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response) override;
    ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>* AsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::RPCFirst::ReqHello>* PrepareAsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::RPCFirst::RespHello* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* BidiHelloRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* AsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* PrepareAsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_LotsOfReplies_;
    const ::grpc::internal::RpcMethod rpcmethod_LotsOfGreetings_;
    const ::grpc::internal::RpcMethod rpcmethod_BidiHello_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC普通方法，一次调用一次返回
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::RPCFirst::ReqHello* request, ::RPCFirst::RespHello* response);
    // RPC 一次请求，流式返回
    virtual ::grpc::Status LotsOfReplies(::grpc::ServerContext* context, const ::RPCFirst::ReqHello* request, ::grpc::ServerWriter< ::RPCFirst::RespHello>* writer);
    // RPC 流式请求，一次返回
    virtual ::grpc::Status LotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerReader< ::RPCFirst::ReqHello>* reader, ::RPCFirst::RespHello* response);
    // RPC 流式请求，流式返回
    virtual ::grpc::Status BidiHello(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::RPCFirst::ReqHello* request, ::grpc::ServerAsyncResponseWriter< ::RPCFirst::RespHello>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfReplies(::grpc::ServerContext* context, ::RPCFirst::ReqHello* request, ::grpc::ServerAsyncWriter< ::RPCFirst::RespHello>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RPCFirst::ReqHello>* /*reader*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidiHello() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiHello(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_LotsOfReplies<WithAsyncMethod_LotsOfGreetings<WithAsyncMethod_BidiHello<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          [this](::grpc::ServerContext* context,
                 const ::RPCFirst::ReqHello* request,
                 ::RPCFirst::RespHello* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayHello(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SayHello(
        ::grpc::experimental::MessageAllocator< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LotsOfReplies() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          [this] { return this->LotsOfReplies(); }));
    }
    ~ExperimentalWithCallbackMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* LotsOfReplies() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::RPCFirst::ReqHello, ::RPCFirst::RespHello>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LotsOfGreetings() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          [this] { return this->LotsOfGreetings(); }));
    }
    ~ExperimentalWithCallbackMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RPCFirst::ReqHello>* /*reader*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* LotsOfGreetings() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::RPCFirst::ReqHello, ::RPCFirst::RespHello>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BidiHello() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackBidiHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(
          [this] { return this->BidiHello(); }));
    }
    ~ExperimentalWithCallbackMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>* BidiHello() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::RPCFirst::ReqHello, ::RPCFirst::RespHello>;}
  };
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_LotsOfReplies<ExperimentalWithCallbackMethod_LotsOfGreetings<ExperimentalWithCallbackMethod_BidiHello<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RPCFirst::ReqHello>* /*reader*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidiHello() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfReplies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RPCFirst::ReqHello>* /*reader*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidiHello() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiHello(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LotsOfReplies() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->LotsOfReplies(); }));
    }
    ~ExperimentalWithRawCallbackMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LotsOfReplies() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LotsOfGreetings() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->LotsOfGreetings(); }));
    }
    ~ExperimentalWithRawCallbackMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RPCFirst::ReqHello>* /*reader*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LotsOfGreetings() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BidiHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->BidiHello(); }));
    }
    ~ExperimentalWithRawCallbackMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RPCFirst::RespHello, ::RPCFirst::ReqHello>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiHello() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::RPCFirst::RespHello* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RPCFirst::ReqHello,::RPCFirst::RespHello>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::RPCFirst::ReqHello, ::RPCFirst::RespHello>(std::bind(&WithSplitStreamingMethod_LotsOfReplies<BaseClass>::StreamedLotsOfReplies, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::RPCFirst::ReqHello* /*request*/, ::grpc::ServerWriter< ::RPCFirst::RespHello>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLotsOfReplies(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::RPCFirst::ReqHello,::RPCFirst::RespHello>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LotsOfReplies<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_LotsOfReplies<Service > > StreamedService;
};

}  // namespace RPCFirst


#endif  // GRPC_rpcfirst_2eproto__INCLUDED
